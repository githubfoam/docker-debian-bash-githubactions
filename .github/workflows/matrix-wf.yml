name: "matrix CI workflow"


on:
  push:
    branches: [ test ]
  # schedule:
  #     - cron:  '0 0 1 * *' ##execution of a task in the first minute of the month 


jobs:

  ubuntu-bullseye-latest-job:
    name: "bullseye docker ubuntu latest"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node:
         - openldap
        #  - modsecurity    
    env:
      distribution: "debian" #https://hub.docker.com/_/debian
      version: "latest"
      name: "debian/bullseye"
      dockerfiledir: "dockerfiles"
      dockerfilename: "Dockerfile.debian.bullseye"
    steps:
    - uses: actions/checkout@v2
    - name: "os fingerprinting"
      run: |
        hostnamectl status
        lsb_release -a
        lsb_release -d
        cat /etc/lsb-release
        cat /etc/issue
        cat /etc/os-release
        sudo apt-get install -y neofetch && neofetch   
    - name: "run test"
      run: |
        dir=$(pwd)
        cd $dir/dockerfiles/buster
        cd ${{matrix.node}}
        echo "############################################"
        echo "############################################"
        echo "Building  ${{matrix.node}} dockerfile"
        echo "############################################"
        echo "############################################"        
        docker build -t ${distribution}/${{matrix.node}} .    


  # ubuntu-buster-latest-job:
  #   name: "buster docker ubuntu latest"
  #   runs-on: ubuntu-latest
  #   env:
  #     distribution: "debian" #https://hub.docker.com/_/debian
  #     version: "latest"
  #     name: "debian/buster"
  #     dockerfiledir: "dockerfiles"
  #     dockerfilename: "Dockerfile.debian.buster"
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: "os fingerprinting"
  #     run: |
  #       hostnamectl status
  #       lsb_release -a
  #       lsb_release -d
  #       cat /etc/lsb-release
  #       cat /etc/issue
  #       cat /etc/os-release
  #       sudo apt-get install -y neofetch && neofetch   
  #   - name: "docker build debian"
  #     run: |
  #       # destroyed afterwards (use --rm )
  #       # all subsequent Dockerfile commands generate new images and the cache is not used
  #       sudo docker build --no-cache --rm  -t ${name}:${version} . --file ${dockerfiledir}/${dockerfilename} 
  #       docker image ls
  #       docker image history ${name}:${version}
  #       docker system df -v               
  #       docker image inspect ${name}:${version}        

  # ubuntu-arm64v8-latest-job:
  #   name: "arm64v8 debian docker ubuntu latest"
  #   runs-on: ubuntu-latest
  #   env:
  #     distribution: "debian" 
  #     version: "latest"
  #     name: "debian/arm64v8"
  #     dockerfiledir: "dockerfiles"
  #     dockerfilename: "Dockerfile.debian.arm64v8"
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: "os fingerprinting"
  #     run: |
  #       hostnamectl status
  #       lsb_release -a
  #       lsb_release -d
  #       cat /etc/lsb-release
  #       cat /etc/issue
  #       cat /etc/os-release
  #       sudo apt-get install -y neofetch && neofetch   
  #   - name: "docker build debian"
  #     run: |
  #       # destroyed afterwards (use --rm )
  #       # all subsequent Dockerfile commands generate new images and the cache is not used
  #       sudo docker build --no-cache --rm  -t ${name}:${version} . --file ${dockerfiledir}/${dockerfilename} 
  #       docker image ls
  #       docker image history ${name}:${version}
  #       docker system df -v               
  #       docker image inspect ${name}:${version}

  # ubuntu-ppc64le-latest-job:
  #   name: "ppc64le debian docker ubuntu latest"
  #   runs-on: ubuntu-latest
  #   env:
  #     distribution: "debian" 
  #     version: "latest"
  #     name: "debian/ppc64le"
  #     dockerfiledir: "dockerfiles"
  #     dockerfilename: "Dockerfile.debian.ppc64le"
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: "os fingerprinting"
  #     run: |
  #       hostnamectl status
  #       lsb_release -a
  #       lsb_release -d
  #       cat /etc/lsb-release
  #       cat /etc/issue
  #       cat /etc/os-release
  #       sudo apt-get install -y neofetch && neofetch   
  #   - name: "docker build debian"
  #     run: |
  #       # destroyed afterwards (use --rm )
  #       # all subsequent Dockerfile commands generate new images and the cache is not used
  #       sudo docker build --no-cache --rm  -t ${name}:${version} . --file ${dockerfiledir}/${dockerfilename} 
  #       docker image ls
  #       docker image history ${name}:${version}
  #       docker system df -v               
  #       docker image inspect ${name}:${version}

  # ubuntu-s390x-latest-job:
  #   name: "s390x debian docker ubuntu latest"
  #   runs-on: ubuntu-latest
  #   env:
  #     distribution: "debian" 
  #     version: "latest"
  #     name: "debian/s390x"
  #     dockerfiledir: "dockerfiles"
  #     dockerfilename: "Dockerfile.debian.s390x"
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: "os fingerprinting"
  #     run: |
  #       hostnamectl status
  #       lsb_release -a
  #       lsb_release -d
  #       cat /etc/lsb-release
  #       cat /etc/issue
  #       cat /etc/os-release
  #       sudo apt-get install -y neofetch && neofetch   
  #   - name: "docker build debian"
  #     run: |
  #       # destroyed afterwards (use --rm )
  #       # all subsequent Dockerfile commands generate new images and the cache is not used
  #       sudo docker build --no-cache --rm  -t ${name}:${version} . --file ${dockerfiledir}/${dockerfilename} 
  #       docker image ls
  #       docker image history ${name}:${version}
  #       docker system df -v               
  #       docker image inspect ${name}:${version}

  # ubuntu-mips64le-latest-job:
  #   name: "mips64le debian docker ubuntu latest"
  #   runs-on: ubuntu-latest
  #   env:
  #     distribution: "debian" 
  #     version: "latest"
  #     name: "debian/mips64le"
  #     dockerfiledir: "dockerfiles"
  #     dockerfilename: "Dockerfile.debian.mips64le"
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: "os fingerprinting"
  #     run: |
  #       hostnamectl status
  #       lsb_release -a
  #       lsb_release -d
  #       cat /etc/lsb-release
  #       cat /etc/issue
  #       cat /etc/os-release
  #       sudo apt-get install -y neofetch && neofetch   
  #   - name: "docker build debian"
  #     run: |
  #       # destroyed afterwards (use --rm )
  #       # all subsequent Dockerfile commands generate new images and the cache is not used
  #       sudo docker build --no-cache --rm  -t ${name}:${version} . --file ${dockerfiledir}/${dockerfilename} 
  #       docker image ls
  #       docker image history ${name}:${version}
  #       docker system df -v               
  #       docker image inspect ${name}:${version}   
        
  # ubuntu-riscv64-latest-job:
  #   name: "riscv64 debian docker ubuntu latest"
  #   runs-on: ubuntu-latest
  #   env:
  #     distribution: "debian" 
  #     version: "latest"
  #     name: "debian/riscv64"
  #     dockerfiledir: "dockerfiles"
  #     dockerfilename: "Dockerfile.debian.riscv64"
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: "os fingerprinting"
  #     run: |
  #       hostnamectl status
  #       lsb_release -a
  #       lsb_release -d
  #       cat /etc/lsb-release
  #       cat /etc/issue
  #       cat /etc/os-release
  #       sudo apt-get install -y neofetch && neofetch   
  #   - name: "docker build debian"
  #     run: |
  #       # destroyed afterwards (use --rm )
  #       # all subsequent Dockerfile commands generate new images and the cache is not used
  #       sudo docker build --no-cache --rm  -t ${name}:${version} . --file ${dockerfiledir}/${dockerfilename} 
  #       docker image ls
  #       docker image history ${name}:${version}
  #       docker system df -v               
  #       docker image inspect ${name}:${version}         